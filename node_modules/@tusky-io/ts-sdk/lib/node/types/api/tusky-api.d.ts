import { Api } from "./api";
import { Membership } from "../types/membership";
import { Vault } from "../types/vault";
import { CreateFolderTreeTxPayload, CreateFolderTxPayload, CreateMembershipTxPayload, CreateVaultTxPayload, UpdateFileTxPayload, UpdateFolderTxPayload, UpdateMembershipTxPayload, UpdateVaultTxPayload } from "../types/transaction";
import { Paginated } from "../types/paginated";
import { ListApiOptions, ListOptions, VaultApiGetOptions } from "../types/query-options";
import { User, UserEncryptionKeys, UserMutable } from "../types/user";
import { FileGetOptions } from "../core/file";
import { File, Folder } from "../types";
import { Storage } from "../types/storage";
import { ApiKey } from "../types/api-key";
import { CreateChallengeRequestPayload, GenerateJWTRequestPayload, GenerateJWTResponsePayload, VerifyChallengeRequestPayload } from "../types/auth";
import { Auth } from "../auth";
import { ApiConfig } from "../config";
import { Collection } from "../types/collection";
import { NFT } from "../types/nft";
import { CollectionMetadata, NFTMetadata } from "../core/nft";
export declare const defaultFileUploadOptions: {
    encrypted: boolean;
};
export default class TuskyApi extends Api {
    protected auth: Auth;
    constructor(config: ApiConfig);
    generateJWT(payload: GenerateJWTRequestPayload): Promise<GenerateJWTResponsePayload>;
    createAuthChallenge(payload: CreateChallengeRequestPayload): Promise<{
        nonce: string;
    }>;
    verifyAuthChallenge(payload: VerifyChallengeRequestPayload): Promise<GenerateJWTResponsePayload>;
    createFolder(tx: CreateFolderTxPayload): Promise<Folder>;
    createFolderTree(tx: CreateFolderTreeTxPayload): Promise<{
        folderIdMap: Record<string, string>;
    }>;
    updateFolder(tx: UpdateFolderTxPayload): Promise<Folder>;
    deleteFolder(id: string): Promise<void>;
    updateFile(tx: UpdateFileTxPayload): Promise<File>;
    deleteFile(id: string): Promise<void>;
    createVault(tx: CreateVaultTxPayload): Promise<Vault>;
    updateVault(tx: UpdateVaultTxPayload): Promise<Vault>;
    deleteVault(id: string): Promise<void>;
    getTrash(): Promise<Folder>;
    emptyTrash(): Promise<Folder>;
    createMembership(tx: CreateMembershipTxPayload): Promise<Membership>;
    updateMembership(tx: UpdateMembershipTxPayload): Promise<Membership>;
    deleteMembership(tx: UpdateMembershipTxPayload): Promise<void>;
    getMembers(vaultId: string): Promise<Paginated<Membership>>;
    downloadFile(id: string, options?: FileGetOptions): Promise<ArrayBuffer | ReadableStream<Uint8Array>>;
    getStorage(): Promise<Storage>;
    getMe(): Promise<User>;
    updateMe(input: UserMutable): Promise<User>;
    createEncryptionKeys(input: UserEncryptionKeys): Promise<User>;
    updateEncryptionKeys(input: UserEncryptionKeys): Promise<User>;
    deleteEncryptionKeys(): Promise<void>;
    getFile(id: string): Promise<File>;
    getFolder(id: string): Promise<Folder>;
    getMembership(id: string): Promise<Membership>;
    getVault(id: string, options?: VaultApiGetOptions): Promise<Vault>;
    getVaults(options?: ListOptions): Promise<Paginated<Vault>>;
    getFiles(options?: ListApiOptions): Promise<Paginated<File>>;
    getFolders(options?: ListApiOptions): Promise<Paginated<Folder>>;
    getApiKeys(): Promise<Paginated<ApiKey>>;
    generateApiKey(): Promise<ApiKey>;
    revokeApiKey(key: string): Promise<ApiKey>;
    getCollection(id: string): Promise<Collection>;
    getNft(id: string): Promise<NFT>;
    getNfts(options?: ListOptions): Promise<Paginated<NFT>>;
    getCollections(options?: ListOptions): Promise<Paginated<Collection>>;
    mintNft(tx: NFTMetadata): Promise<NFT>;
    mintCollection(tx: CollectionMetadata): Promise<Collection>;
}
export { TuskyApi };
