import "reflect-metadata";
import { EncryptedVaultKeyPair } from "../../types";
import { Encrypter } from "../encrypter";
export declare abstract class Encryptable {
    constructor(keys: Array<EncryptedVaultKeyPair>);
    __keys__: Array<EncryptedVaultKeyPair>;
    __encryptProps__: Set<string>;
    [key: string]: any;
    decryptPrivateKey(publicKey: string, encrypter: Encrypter): Promise<Uint8Array>;
    decrypt(encrypter: Encrypter): Promise<void>;
    encrypt(): Promise<void>;
}
/**
 *
 * De/-Encrypt class attribute(s).
 * @example
```
class Foo extends Encryptable {
    constructor(bar, _keys) {
        super(_keys)
        this.bar = bar
    }

    @encrypted()
    bar: string // attr will be de/-encrypted
}
const foo = new Foo("test")
await foo.encrypt()
await foo.decrypt()
```
 */
export declare function encrypted(): (target: any, propertyKey: string) => void;
