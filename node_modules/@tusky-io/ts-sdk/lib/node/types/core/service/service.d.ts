import { Api } from "../../api/api";
import { actions } from "../../constants";
import { Vault } from "../../types/vault";
import { Object, ObjectType } from "../../types/object";
import { Signer } from "../../signer";
import { EncryptedVaultKeyPair, Env, VaultKeyPair } from "../../types";
import { Encrypter } from "../../crypto/encrypter";
import { Auth } from "../../auth";
import PubSub from "../../api/pubsub";
export declare const STATE_CONTENT_TYPE = "application/json";
declare class Service {
    api: Api;
    pubsub: PubSub;
    address: string;
    signer: Signer;
    encrypter: Encrypter;
    keys: Array<EncryptedVaultKeyPair>;
    decryptedKeys: Array<VaultKeyPair>;
    vaultId: string;
    parentId: string;
    objectId: string;
    type: ObjectType;
    encrypted: boolean;
    vault: Vault;
    object: Object;
    groupRef: string;
    clientName: string;
    storage: Storage;
    env: Env;
    constructor(config: ServiceConfig);
    setKeys(keys: EncryptedVaultKeyPair[]): void;
    setDecryptedKeys(keys: VaultKeyPair[]): void;
    decryptKeys(): Promise<void>;
    setVaultId(vaultId: string): void;
    setParentId(parentId: string): void;
    setObjectId(objectId: string): void;
    setGroupRef(groupRef: string): void;
    setObject(object: Object): void;
    setEncrypted(encrypted: boolean): void;
    setVault(vault: Vault): void;
    processWriteString(data: string): Promise<string>;
    setVaultContext(vaultId: string): Promise<void>;
    setMembershipKeys(object: Object): Promise<void>;
}
export type ServiceConfig = {
    decryptedKeys?: VaultKeyPair[];
    address?: string;
    api?: Api;
    pubsub?: PubSub;
    auth?: Auth;
    signer?: Signer;
    encrypter?: Encrypter;
    keys?: Array<EncryptedVaultKeyPair>;
    vaultId?: string;
    objectId?: string;
    type?: ObjectType;
    action?: actions;
    encrypted?: boolean;
    vault?: Vault;
    object?: Object;
    actionRef?: string;
    groupRef?: string;
    contentType?: string;
    clientName?: string;
    storage?: Storage;
    env?: Env;
};
export type VaultOptions = {
    vaultId?: string;
    encrypted?: boolean;
};
export { Service };
