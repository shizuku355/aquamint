import { Service } from "./service/service";
import { User, UserMutable } from "../types/user";
import { ClientConfig } from "../config";
import { X25519KeyPair } from "../crypto";
declare class MeModule {
    protected service: Service;
    private userEncryption;
    constructor(config?: ClientConfig);
    /**
     * Get currently authenticated user
     * @returns {Promise<User>}
     */
    get(): Promise<User>;
    /**
     * Update currently authenticated user
     * @param {UserMutable} input
     * @returns {Promise<User>}
     */
    update(input: UserMutable): Promise<User>;
    /**
     * Setup user password
     * @param {string} password
     * @returns {Promise<{ keypair: X25519KeyPair; user: User }>}
     */
    setupPassword(password: string): Promise<{
        keypair: X25519KeyPair;
        user: User;
    }>;
    /**
     * Change user password\
     * Decrypt user private key with the old password\
     * Encrypt user private key with the new password
     * @param {string} oldPassword
     * @param {string} newPassword
     * @returns {Promise<User>}
     */
    changePassword(oldPassword: string, newPassword: string): Promise<User>;
    /**
     * Backup user password\
     * Generate fresh backup phrase & use it as a backup
     * @param {string} password
     * @returns {Promise<{ backupPhrase: string; user: User }>}
     */
    backupPassword(password: string): Promise<{
        backupPhrase: string;
        user: User;
    }>;
    /**
     * Reset user password\
     * Recover user private key using the backup phrase\
     * Encrypt user private key with the new password
     * @param {string} backupPhrase
     * @param {string} newPassword
     * @returns {Promise<User>}
     */
    resetPassword(backupPhrase: string, newPassword: string): Promise<User>;
    /**
     * Reset user encryption context
     * WARNING: It will reset user keys & will delete all private content created by the user
     * @returns {Promise<void>}
     */
    resetEncryptionKeys(): Promise<void>;
    /**
     * Check whether the user has ongoing encryption session
     * @returns {Promise<boolean>}
     */
    hasEncryptionSession(): Promise<boolean>;
    /**
     * Clear encryption session from the client storage
     */
    clearEncryptionSession(): Promise<void>;
    /**
     * Import encryption session from password
     * @param {string} password
     * @returns {Promise<{ keypair: X25519KeyPair }>}
     */
    importEncryptionSessionFromPassword(password: string): Promise<{
        keypair: X25519KeyPair;
    }>;
    /**
     * Import encryption session from keystore, if present
     * @returns {Promise<{ keypair: X25519KeyPair }>}
     */
    importEncryptionSessionFromKeystore(): Promise<{
        keypair: X25519KeyPair;
    }>;
}
export { MeModule };
