import { Service } from "./service/service";
import { ClientConfig } from "../config";
import { File, Paginated } from "../types";
import { NFT } from "../types/nft";
import { Collection } from "../types/collection";
import { ListOptions } from "../types/query-options";
declare class NFTModule {
    protected service: Service;
    constructor(config?: ClientConfig);
    /**
     * Mint a single NFT from file
     * @param  {NFTMetadata} metadata
     * @returns {Promise<NFT>} Promise with the minted NFT
     * @example
     * const nft = await tusky.nft.mint({
     *   fileId: "ac8a7506-5317-434a-b38d-10c5bcbc91c8",
     *   recipient: "0x17bb4b18b04b48fb9a57d1ee774ec2d6bad212c48b5264780e5eb65bb81c560b",
     *   name: "Image #1",
     *   description: "Description for the NFT",
     *   creator: "Name of the NFT creator",
     *   projectUrl: "Url for the project website",
     * });
     */
    mint(metadata: NFTMetadata): Promise<NFT>;
    /**
     * Mint NFT collection from folder content
     * @param  {CollectionMetadata} metadata
     * @returns {Promise<Collection>} Promise with the minted NFT
     * @example
     * const collection = await tusky.nft.mintCollection({
     *   folderId: "ac8a7506-5317-434a-b38d-10c5bcbc91c8",
     *   recipient: "0x17bb4b18b04b48fb9a57d1ee774ec2d6bad212c48b5264780e5eb65bb81c560b",
     *   description: "Common description for all NFTs within the collection",
     *   creator: "Name of the NFT creator",
     *   projectUrl: "Url for the project website",
     *});
     */
    mintCollection(metadata: CollectionMetadata): Promise<Collection>;
    get(id: string): Promise<NFT>;
    getCollection(id: string): Promise<Collection>;
    /**
     * @param {ListOptions} options
     * @returns {Promise<Array<NFT>>} Promise with paginated user nfts
     */
    list(options?: ListOptions): Promise<Paginated<NFT>>;
    /**
     * @param {ListOptions} options
     * @returns {Promise<Array<NFT>>} Promise with all user nfts
     */
    listAll(options?: ListOptions): Promise<Array<NFT>>;
    listCollections(): Promise<Paginated<Collection>>;
    /**
     * @returns {Promise<Array<Collection>>} Promise with all user nft collections
     */
    listAllCollections(): Promise<Array<Collection>>;
}
export { NFTModule };
export type NFTMetadata = {
    recipient: string;
    name?: string;
    description: string;
    fileId?: string;
    projectUrl?: string;
    link?: string;
    thumbnailUrl?: string;
    creator?: string;
};
export type CollectionMetadata = {
    recipient: string;
    description: string;
    folderId: string;
    nftMetadata?: NFTMetadata[];
    projectUrl?: string;
    link?: string;
    thumbnailUrl?: string;
    thumbnail?: File;
    creator?: string;
};
