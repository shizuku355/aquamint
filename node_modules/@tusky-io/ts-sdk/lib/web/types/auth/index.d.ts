import { AxiosRequestHeaders } from "axios";
import { AuthType, OAuthConfig, WalletConfig } from "../types/auth";
import { Env } from "../types/env";
export type SignPersonalMessage = (message: {
    message: Uint8Array;
}, callbacks: {
    onSuccess: (data: {
        signature: string;
    }) => void;
    onError: (error: Error) => void;
}) => void;
export type Account = {
    address: string;
    publicKey: Uint8Array;
};
export declare class Auth {
    private env;
    private authType;
    private jwtClient;
    private authProvider;
    private clientId;
    private redirectUri;
    private storage;
    private signPersonalMessage;
    private account;
    private keypair;
    private apiKey;
    constructor(options?: AuthOptions);
    signIn(): Promise<{
        address?: string;
    }>;
    signOut(): void;
    initOAuthFlow(): Promise<void>;
    handleOAuthCallback(): Promise<{
        address: string;
    }>;
    getAuthorizationHeader(): Promise<AxiosRequestHeaders>;
    getAddress(): string;
}
export type AuthOptions = {
    authType?: AuthType;
    env?: Env;
    apiKey?: string;
} & OAuthConfig & WalletConfig;
