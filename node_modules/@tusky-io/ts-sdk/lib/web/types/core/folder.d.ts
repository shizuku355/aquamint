import { Folder } from "../types/folder";
import { GetOptions, ListOptions } from "../types/query-options";
import { Paginated } from "../types/paginated";
import { FolderService } from "./service/folder";
import { ServiceConfig } from ".";
import { Auth } from "../auth";
import { File } from "../types";
import { FolderSource } from "./web/folder";
declare class FolderModule {
    protected type: "Folder";
    protected service: FolderService;
    protected parentId?: string;
    protected defaultCreateOptions: FolderCreateOptions;
    protected defaultUploadOptions: FolderUploadOptions;
    protected defaultListOptions: ListOptions;
    protected defaultGetOptions: GetOptions;
    protected auth: Auth;
    constructor(config?: ServiceConfig);
    /**
     * @param {string} vaultId
     * @param {string} name folder name
     * @returns {Promise<Folder>} Promise with new folder
     */
    create(vaultId: string, name: string, options?: FolderCreateOptions): Promise<Folder>;
    /**
     * Upload folder with its content from given source
     * @param {string} vaultId
     * @param {FolderSource} folder folder source: folder path, file system entry
     * @param  {FolderUploadOptions} [options] parent id, includeRootFolder flag etc.
     * @returns {Promise<{folderIdMap: Record<string, string>}>} Promise with new folder id map
     */
    upload(vaultId: string, folder: FolderSource, options?: FolderUploadOptions): Promise<{
        folderIdMap: Record<string, string>;
    }>;
    /**
     * Create folder structure
     * @param {string} vaultId
     * @param {Array<string>} paths relative paths array
     * @param  {FolderUploadOptions} [options] parent id, includeRootFolder flag etc.
     * @returns {Promise<{folderIdMap: Record<string, string>}>} Promise with new folder id map
     */
    createTree(vaultId: string, paths: Array<string>, options?: FolderUploadOptions): Promise<{
        folderIdMap: Record<string, string>;
    }>;
    /**
     * @param {string} id
     * @returns {Promise<Folder>} Promise with the folder object
     */
    get(id: string, options?: GetOptions): Promise<Folder>;
    /**
     * @param {ListOptions} options
     * @returns {Promise<Paginated<Folder>>} Promise with paginated user folders
     */
    list(options?: ListOptions): Promise<Paginated<Folder>>;
    /**
     * @param {ListOptions} options
     * @returns {Promise<Array<Folder>>} Promise with all user folders
     */
    listAll(options?: ListOptions): Promise<Array<Folder>>;
    /**
     * @param {string} id folder id
     * @param {string} name new name
     * @returns {Promise<Folder>}
     */
    rename(id: string, name: string): Promise<Folder>;
    /**
     * @param {string} id
     * @param {string} [parentId] new parent folder id, if no parent id provided will be moved to the vault root.
     * @returns {Promise<Folder>}
     */
    move(id: string, parentId?: string): Promise<Folder>;
    /**
     * The folder will be moved to the trash. All folder contents will be permanently deleted within 30 days.\
     * To undo this action, call folder.restore() within the 30-day period.
     * @param {string} id folder id
     * @returns {Promise<Folder>}
     */
    delete(id: string): Promise<Folder>;
    /**
     * Restores the folder from the trash, recovering all folder contents.\
     * This action must be performed within 30 days of the folder being moved to the trash to prevent permanent deletion.
     * @param {string} id folder id
     * @returns {Promise<Folder>}
     */
    restore(id: string): Promise<Folder>;
    /**
     * The folder and all its contents will be permanently deleted.\
     * This action is irrevocable and can only be performed if the folder is already in trash.
     * @param {string} id folder id
     * @returns {Promise<void>}
     */
    deletePermanently(id: string): Promise<void>;
}
export type FileOrFolderInfo = {
    fullPath: string;
    relativePath: string;
    parentPath: string;
    name: string;
    isFolder: boolean;
    id?: string;
    file?: File;
};
export type FolderCreateOptions = {
    parentId?: string;
};
export type FolderUploadOptions = {
    parentId?: string;
    includeRootFolder?: boolean;
    withFiles?: boolean;
    skipHidden?: boolean;
};
export { FolderModule };
