import { FileSource } from "../types/web/file";
import { Service, ServiceConfig } from "./service/service";
import * as tus from "tus-js-client";
import { Auth } from "../auth";
import { ZipUploadOptions } from "types/zip";
declare class ZipModule {
    protected service: Service;
    protected auth: Auth;
    constructor(config?: ServiceConfig);
    /**
     * Generate preconfigured Tus uploader
     * @param  {string} vaultId
     * @param  {FileSource} file
     *    Nodejs: Buffer | Readable | string (path) | ArrayBuffer | Uint8Array
     *    Browser: File | Blob | Uint8Array | ArrayBuffer
     * @param  {ZipUploadOptions} options parent id
     * @returns {Promise<tus.Upload>} Promise with tus.Upload instance
     * @example
     * // use in Browser with Uppy upload
     *
     * const uploader = tusky.zip.uploader(vaultId);
     *
     * const uppy = new Uppy({
     *    restrictions: {
     *      allowedFileTypes: ['.zip', 'application/zip', 'application/x-zip-compressed'],
     *      maxFileSize: 1000000000,
     *    },
     *    autoProceed: false
     *  })
     *  .use(Tus, uploader.options);
     *
     * uppy.addFile(file);
     * uppy.upload();
     *
     * @example
     * // use in Nodejs
     *
     * const uploader = tusky.zip.uploader(vaultId, file, {
     *    onSuccess: () => {
     *      console.log('Upload complete');
     *    },
     *    onError: (error) => {
     *      console.log('Upload error', error);
     *    },
     *    onProgress: (progress) => {
     *      console.log('Upload progress', progress);
     *    }
     * });
     *
     * uploader.start();
     *
     */
    uploader(vaultId: string, file?: FileSource, options?: ZipUploadOptions): Promise<tus.Upload>;
    /**
     * Upload zip & unpack on server
     * @param  {string} vaultId
     * @param  {FileSource} file
     *    Nodejs: Buffer | Readable | string (path) | ArrayBuffer | Uint8Array
     *    Browser: File | Blob | Uint8Array | ArrayBuffer
     * @param  {ZipUploadOptions} options parent id
     * @returns {Promise<string>} Promise with upload id
     */
    upload(vaultId: string, file: FileSource, options?: ZipUploadOptions): Promise<string>;
}
export { ZipModule };
