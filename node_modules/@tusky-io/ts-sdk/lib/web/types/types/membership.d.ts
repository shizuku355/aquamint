import { Encryptable } from "../crypto";
import { User } from "./user";
export type RoleType = "viewer" | "contributor" | "owner";
export type MemberRoleType = "viewer" | "contributor";
export type StatusType = "accepted" | "pending" | "revoked";
export declare const activeStatus: StatusType[];
export type EncryptedVaultKeyPair = {
    publicKey: string;
    encPrivateKey: string;
};
export type VaultKeyPair = {
    publicKey: Uint8Array;
    privateKey: Uint8Array;
};
export declare class Membership extends Encryptable {
    id: string;
    owner: string;
    createdAt: string;
    updatedAt: string;
    expiresAt: string;
    status: StatusType;
    memberAddress: string;
    role: RoleType;
    data?: string[];
    encPublicSigningKey: string;
    email: string;
    memberDetails: User;
    allowedPaths: AllowedPaths;
    vaultId: string;
    keys: VaultKeyPair[];
    ownerAccess?: OwnerAccess;
    __encrypted__?: boolean;
    constructor(membershipProto: any, keys?: Array<EncryptedVaultKeyPair>);
}
export type MembershipKeys = {
    isEncrypted: boolean;
    keys: EncryptedVaultKeyPair[];
    publicKey?: string;
};
export type MembershipCreateOptions = {
    message?: string;
};
export type MembershipAirdropOptions = {
    name?: string;
    expiresAt?: number;
    allowedStorage?: number;
    allowedPaths?: AllowedPaths;
    role?: MemberRoleType;
    password?: string;
    ownerAccess?: boolean;
};
export type AllowedPaths = {
    folders?: string[];
    files?: string[];
};
export type OwnerAccess = {
    password?: string;
    identityPrivateKey: string;
};
