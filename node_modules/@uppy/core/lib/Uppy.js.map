{"version":3,"names":["Translator","ee","nanoid","throttle","DefaultStore","getFileType","getFileNameAndExtension","getSafeFileId","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","Restricter","defaultOptions","defaultRestrictionOptions","RestrictionError","packageJson","locale","defaultUploadState","totalProgress","allowNewUpload","error","recoveredState","_plugins","_classPrivateFieldLooseKey","_restricter","_storeUnsubscribe","_emitter","_preProcessors","_uploaders","_postProcessors","_informAndEmit","_checkRequiredMetaFieldsOnFile","_checkRequiredMetaFields","_assertNewUploadAllowed","_transformFile","_startIfAutoProceed","_checkAndUpdateFileState","_handleUploadProgress","_updateTotalProgress","_updateTotalProgressThrottled","_calculateTotalProgress","_addListeners","_updateOnlineStatus","_requestClientById","_createUpload","_getUpload","_removeUpload","_runUpload","Uppy","constructor","opts","Object","defineProperty","value","_runUpload2","_removeUpload2","_getUpload2","_createUpload2","_addListeners2","_calculateTotalProgress2","_updateTotalProgress2","_checkAndUpdateFileState2","_startIfAutoProceed2","_transformFile2","_assertNewUploadAllowed2","_checkRequiredMetaFields2","_checkRequiredMetaFieldsOnFile2","_informAndEmit2","writable","create","Set","scheduledAutoProceed","wasOffline","file","progress","fileInState","getFile","id","undefined","log","percentage","newProgress","bytesTotal","Number","isFinite","Math","round","bytesUploaded","uploadStarted","setFileState","_classPrivateFieldLooseBase","leading","trailing","updateOnlineStatus","bind","Map","defaultLocale","autoProceed","allowMultipleUploadBatches","debug","restrictions","meta","onBeforeFileAdded","files","hasOwn","onBeforeUpload","store","logger","infoTimeout","merged","VERSION","i18nInit","setState","plugins","currentUploads","capabilities","uploadProgress","individualCancellation","resumableUploads","info","i18n","subscribe","prevState","nextState","patch","emit","updateAll","window","event","_len","arguments","length","args","Array","_key","on","callback","once","off","state","iteratePlugins","plugin","update","getState","patchFilesState","filesWithNewState","existingFilesState","fromEntries","entries","map","_ref","fileID","newFileState","Error","onMissingKey","key","translator","translate","i18nArray","translateArray","setOptions","newOpts","setMeta","resetProgress","defaultProgress","uploadComplete","updatedFiles","keys","forEach","tus","transloadit","clear","addPreProcessor","fn","add","removePreProcessor","delete","addPostProcessor","removePostProcessor","addUploader","removeUploader","data","updatedMeta","setFileMeta","newMeta","getFiles","values","getFilesByIds","ids","getObjectOfFilesPerState","filesObject","inProgressFiles","newFiles","startedFiles","uploadStartedFiles","pausedFiles","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","push","isPaused","preprocess","postprocess","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","validateRestrictions","validate","err","validateSingleFile","message","validateAggregateRestrictions","existingFiles","checkIfFileAlreadyExists","addFile","nextFilesState","validFilesToAdd","errors","restrictionErrors","filter","isRestriction","firstValidFileToAdd","name","type","addFiles","fileDescriptors","nonRestrictionErrors","subError","smart_count","details","AggregateError","removeFiles","fileIDs","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","uploadID","newFileIDs","stateUpdate","removedFileIDs","join","removeFile","pauseResume","wasPaused","pauseAll","inProgressUpdatedFiles","updatedFile","resumeAll","retryAll","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","retryUpload","logout","_provider","provider","Symbol","for","_window$navigator$onL","online","navigator","onLine","getID","use","Plugin","msg","TypeError","_len2","_key2","pluginId","existsPluginAlready","getPlugin","install","foundPlugin","find","method","flat","removePlugin","instance","uninstall","list","index","findIndex","item","splice","updatedState","destroy","removeEventListener","hideInfo","slice","duration","isComplexMessage","setTimeout","warn","registerRequestClient","client","set","getRequestClientForFile","remote","requestClient","get","requestClientId","restore","reject","addResultData","currentUpload","result","upload","_classPrivateFieldLoo","hasFilesToRetry","hasNewFiles","onBeforeUploadResult","then","validateMinNumberOfFiles","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","userFacingErrors","isUserFacing","maxNumToShow","firstErrors","additionalErrors","_ref2","count","missingFields","getMissingRequiredMetaFields","missingRequiredMetaFields","success","fileDescriptorOrFile","File","size","fileType","fileName","fileExtension","extension","source","isRemote","preview","stack","filesToAdd","fileToAdd","_existingFiles$newFil","newFile","existingFileState","onBeforeFileAddedResult","_newFile$name","_totalProgressPercent","_totalProgressPercent2","totalProgressPercent","filesInProgress","every","isSizedFile","sizedFilesInProgress","unsizedFilesInProgress","totalFilesSize","reduce","acc","_file$progress$bytesT","totalUploadedSize","errorHandler","response","errorMsg","_file$name","newError","uploadStalledWarningRecentlyEmitted","trim","onUploadStarted","filesFiltered","exists","filesState","Date","now","uploadResp","currentProgress","mode","uploadURL","addEventListener","allowMultipleUploads","step","getCurrentUpload","steps","version"],"sources":["Uppy.ts"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n/* global AggregateError */\n\nimport type { h } from 'preact'\nimport Translator from '@uppy/utils/lib/Translator'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore untyped\nimport ee from 'namespace-emitter'\nimport { nanoid } from 'nanoid/non-secure'\nimport throttle from 'lodash/throttle.js'\nimport DefaultStore, { type Store } from '@uppy/store-default'\nimport getFileType from '@uppy/utils/lib/getFileType'\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension'\nimport { getSafeFileId } from '@uppy/utils/lib/generateFileID'\nimport type {\n  UppyFile,\n  Meta,\n  Body,\n  MinimalRequiredUppyFile,\n} from '@uppy/utils/lib/UppyFile'\nimport type { CompanionFile } from '@uppy/utils/lib/CompanionFile'\nimport type {\n  CompanionClientProvider,\n  CompanionClientSearchProvider,\n} from '@uppy/utils/lib/CompanionClientProvider'\nimport type {\n  FileProgressNotStarted,\n  FileProgressStarted,\n} from '@uppy/utils/lib/FileProgress'\nimport type {\n  Locale,\n  I18n,\n  OptionalPluralizeLocale,\n} from '@uppy/utils/lib/Translator'\nimport supportsUploadProgress from './supportsUploadProgress.js'\nimport getFileName from './getFileName.js'\nimport { justErrorsLogger, debugLogger } from './loggers.js'\nimport {\n  Restricter,\n  defaultOptions as defaultRestrictionOptions,\n  RestrictionError,\n} from './Restricter.js'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\nimport locale from './locale.js'\n\nimport type BasePlugin from './BasePlugin.js'\nimport type { Restrictions, ValidateableFile } from './Restricter.js'\n\ntype Processor = (\n  fileIDs: string[],\n  uploadID: string,\n) => Promise<unknown> | void\n\ntype LogLevel = 'info' | 'warning' | 'error' | 'success'\n\nexport type UnknownPlugin<\n  M extends Meta,\n  B extends Body,\n  PluginState extends Record<string, unknown> = Record<string, unknown>,\n> = BasePlugin<any, M, B, PluginState>\n\n/**\n * ids are always `string`s, except the root folder's id can be `null`\n */\nexport type PartialTreeId = string | null\n\nexport type PartialTreeStatusFile = 'checked' | 'unchecked'\nexport type PartialTreeStatus = PartialTreeStatusFile | 'partial'\n\nexport type PartialTreeFile = {\n  type: 'file'\n  id: string\n\n  /**\n   * There exist two types of restrictions:\n   * - individual restrictions (`allowedFileTypes`, `minFileSize`, `maxFileSize`), and\n   * - aggregate restrictions (`maxNumberOfFiles`, `maxTotalFileSize`).\n   *\n   * `.restrictionError` reports whether this file passes individual restrictions.\n   *\n   */\n  restrictionError: string | null\n\n  status: PartialTreeStatusFile\n  parentId: PartialTreeId\n  data: CompanionFile\n}\n\nexport type PartialTreeFolderNode = {\n  type: 'folder'\n  id: string\n\n  /**\n   * Consider `(.nextPagePath, .cached)` a composite key that can represent 4 states:\n   * - `{ cached: true, nextPagePath: null }` - we fetched all pages in this folder\n   * - `{ cached: true, nextPagePath: 'smth' }` - we fetched 1st page, and there are still pages left to fetch in this folder\n   * - `{ cached: false, nextPagePath: null }` - we didn't fetch the 1st page in this folder\n   * - `{ cached: false, nextPagePath: 'someString' }` - ❌ CAN'T HAPPEN ❌\n   */\n  cached: boolean\n  nextPagePath: PartialTreeId\n\n  status: PartialTreeStatus\n  parentId: PartialTreeId\n  data: CompanionFile\n}\n\nexport type PartialTreeFolderRoot = {\n  type: 'root'\n  id: PartialTreeId\n\n  cached: boolean\n  nextPagePath: PartialTreeId\n}\n\nexport type PartialTreeFolder = PartialTreeFolderNode | PartialTreeFolderRoot\n\n/**\n * PartialTree has the following structure.\n *\n *           FolderRoot\n *         ┌─────┴─────┐\n *     FolderNode     File\n *   ┌─────┴────┐\n *  File      File\n *\n * Root folder is called `PartialTreeFolderRoot`,\n * all other folders are called `PartialTreeFolderNode`, because they are \"internal nodes\".\n *\n * It's possible for `PartialTreeFolderNode` to be a leaf node if it doesn't contain any files.\n */\nexport type PartialTree = (PartialTreeFile | PartialTreeFolder)[]\n\nexport type UnknownProviderPluginState = {\n  authenticated: boolean | undefined\n  didFirstRender: boolean\n  searchString: string\n  loading: boolean | string\n  partialTree: PartialTree\n  currentFolderId: PartialTreeId\n  username: string | null\n}\n\nexport interface AsyncStore {\n  getItem: (key: string) => Promise<string | null>\n  setItem: (key: string, value: string) => Promise<void>\n  removeItem: (key: string) => Promise<void>\n}\n\n/**\n * This is a base for a provider that does not necessarily use the Companion-assisted OAuth2 flow\n */\nexport interface BaseProviderPlugin {\n  title: string\n  icon: () => h.JSX.Element\n  storage: AsyncStore\n}\n\n/*\n * UnknownProviderPlugin can be any Companion plugin (such as Google Drive)\n * that uses the Companion-assisted OAuth flow.\n * As the plugins are passed around throughout Uppy we need a generic type for this.\n * It may seems like duplication, but this type safe. Changing the type of `storage`\n * will error in the `Provider` class of @uppy/companion-client and vice versa.\n *\n * Note that this is the *plugin* class, not a version of the `Provider` class.\n * `Provider` does operate on Companion plugins with `uppy.getPlugin()`.\n */\nexport type UnknownProviderPlugin<\n  M extends Meta,\n  B extends Body,\n> = UnknownPlugin<M, B, UnknownProviderPluginState> &\n  BaseProviderPlugin & {\n    rootFolderId: string | null\n    files: UppyFile<M, B>[]\n    provider: CompanionClientProvider\n  }\n\n/*\n * UnknownSearchProviderPlugin can be any search Companion plugin (such as Unsplash).\n * As the plugins are passed around throughout Uppy we need a generic type for this.\n * It may seems like duplication, but this type safe. Changing the type of `title`\n * will error in the `SearchProvider` class of @uppy/companion-client and vice versa.\n *\n * Note that this is the *plugin* class, not a version of the `SearchProvider` class.\n * `SearchProvider` does operate on Companion plugins with `uppy.getPlugin()`.\n */\nexport type UnknownSearchProviderPluginState = {\n  isInputMode: boolean\n} & Pick<\n  UnknownProviderPluginState,\n  'loading' | 'searchString' | 'partialTree' | 'currentFolderId'\n>\nexport type UnknownSearchProviderPlugin<\n  M extends Meta,\n  B extends Body,\n> = UnknownPlugin<M, B, UnknownSearchProviderPluginState> &\n  BaseProviderPlugin & {\n    provider: CompanionClientSearchProvider\n  }\n\nexport interface UploadResult<M extends Meta, B extends Body> {\n  successful?: UppyFile<M, B>[]\n  failed?: UppyFile<M, B>[]\n  uploadID?: string\n  [key: string]: unknown\n}\n\ninterface CurrentUpload<M extends Meta, B extends Body> {\n  fileIDs: string[]\n  step: number\n  result: UploadResult<M, B>\n}\n\n// TODO: can we use namespaces in other plugins to populate this?\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface Plugins extends Record<string, Record<string, unknown> | undefined> {}\n\nexport interface State<M extends Meta, B extends Body>\n  extends Record<string, unknown> {\n  meta: M\n  capabilities: {\n    uploadProgress: boolean\n    individualCancellation: boolean\n    resumableUploads: boolean\n    isMobileDevice?: boolean\n    darkMode?: boolean\n  }\n  currentUploads: Record<string, CurrentUpload<M, B>>\n  allowNewUpload: boolean\n  recoveredState: null | Required<Pick<State<M, B>, 'files' | 'currentUploads'>>\n  error: string | null\n  files: {\n    [key: string]: UppyFile<M, B>\n  }\n  info: Array<{\n    isHidden?: boolean\n    type: LogLevel\n    message: string\n    details?: string | Record<string, string> | null\n  }>\n  plugins: Plugins\n  totalProgress: number\n  companion?: Record<string, string>\n}\n\nexport interface UppyOptions<M extends Meta, B extends Body> {\n  id?: string\n  autoProceed?: boolean\n  /**\n   * @deprecated Use allowMultipleUploadBatches\n   */\n  allowMultipleUploads?: boolean\n  allowMultipleUploadBatches?: boolean\n  logger?: typeof debugLogger\n  debug?: boolean\n  restrictions: Restrictions\n  meta?: M\n  onBeforeFileAdded?: (\n    currentFile: UppyFile<M, B>,\n    files: { [key: string]: UppyFile<M, B> },\n  ) => UppyFile<M, B> | boolean | undefined\n  onBeforeUpload?: (files: {\n    [key: string]: UppyFile<M, B>\n  }) => { [key: string]: UppyFile<M, B> } | boolean\n  locale?: Locale\n  store?: Store<State<M, B>>\n  infoTimeout?: number\n}\n\nexport interface UppyOptionsWithOptionalRestrictions<\n  M extends Meta,\n  B extends Body,\n> extends Omit<UppyOptions<M, B>, 'restrictions'> {\n  restrictions?: Partial<Restrictions>\n}\n\n// The user facing type for UppyOptions used in uppy.setOptions()\ntype MinimalRequiredOptions<M extends Meta, B extends Body> = Partial<\n  Omit<UppyOptions<M, B>, 'locale' | 'meta' | 'restrictions'> & {\n    locale: OptionalPluralizeLocale\n    meta: Partial<M>\n    restrictions: Partial<Restrictions>\n  }\n>\n\nexport type NonNullableUppyOptions<M extends Meta, B extends Body> = Required<\n  UppyOptions<M, B>\n>\n\nexport interface _UppyEventMap<M extends Meta, B extends Body> {\n  'back-online': () => void\n  'cancel-all': () => void\n  complete: (result: UploadResult<M, B>) => void\n  error: (\n    error: { name: string; message: string; details?: string },\n    file?: UppyFile<M, B>,\n    response?: UppyFile<M, B>['response'],\n  ) => void\n  'file-added': (file: UppyFile<M, B>) => void\n  'file-removed': (file: UppyFile<M, B>) => void\n  'files-added': (files: UppyFile<M, B>[]) => void\n  'info-hidden': () => void\n  'info-visible': () => void\n  'is-offline': () => void\n  'is-online': () => void\n  'pause-all': () => void\n  'plugin-added': (plugin: UnknownPlugin<any, any>) => void\n  'plugin-remove': (plugin: UnknownPlugin<any, any>) => void\n  'postprocess-complete': (\n    file: UppyFile<M, B> | undefined,\n    progress?: NonNullable<FileProgressStarted['preprocess']>,\n  ) => void\n  'postprocess-progress': (\n    file: UppyFile<M, B> | undefined,\n    progress: NonNullable<FileProgressStarted['postprocess']>,\n  ) => void\n  'preprocess-complete': (\n    file: UppyFile<M, B> | undefined,\n    progress?: NonNullable<FileProgressStarted['preprocess']>,\n  ) => void\n  'preprocess-progress': (\n    file: UppyFile<M, B> | undefined,\n    progress: NonNullable<FileProgressStarted['preprocess']>,\n  ) => void\n  progress: (progress: number) => void\n  restored: (pluginData: any) => void\n  'restore-confirmed': () => void\n  'restore-canceled': () => void\n  'restriction-failed': (file: UppyFile<M, B> | undefined, error: Error) => void\n  'resume-all': () => void\n  'retry-all': (files: UppyFile<M, B>[]) => void\n  'state-update': (\n    prevState: State<M, B>,\n    nextState: State<M, B>,\n    patch?: Partial<State<M, B>>,\n  ) => void\n  upload: (uploadID: string, files: UppyFile<M, B>[]) => void\n  'upload-error': (\n    file: UppyFile<M, B> | undefined,\n    error: { name: string; message: string; details?: string },\n    response?:\n      | Omit<NonNullable<UppyFile<M, B>['response']>, 'uploadURL'>\n      | undefined,\n  ) => void\n  'upload-pause': (file: UppyFile<M, B> | undefined, isPaused: boolean) => void\n  'upload-progress': (\n    file: UppyFile<M, B> | undefined,\n    progress: FileProgressStarted,\n  ) => void\n  'upload-retry': (file: UppyFile<M, B>) => void\n  'upload-stalled': (\n    error: { message: string; details?: string },\n    files: UppyFile<M, B>[],\n  ) => void\n  'upload-success': (\n    file: UppyFile<M, B> | undefined,\n    response: NonNullable<UppyFile<M, B>['response']>,\n  ) => void\n}\n\nexport interface UppyEventMap<M extends Meta, B extends Body>\n  extends _UppyEventMap<M, B> {\n  'upload-start': (files: UppyFile<M, B>[]) => void\n}\n\n/** `OmitFirstArg<typeof someArray>` is the type of the returned value of `someArray.slice(1)`. */\ntype OmitFirstArg<T> = T extends [any, ...infer U] ? U : never\n\nconst defaultUploadState = {\n  totalProgress: 0,\n  allowNewUpload: true,\n  error: null,\n  recoveredState: null,\n}\n\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\nexport class Uppy<\n  M extends Meta = Meta,\n  B extends Body = Record<string, never>,\n> {\n  static VERSION = packageJson.version\n\n  #plugins: Record<string, UnknownPlugin<M, B>[]> = Object.create(null)\n\n  #restricter\n\n  #storeUnsubscribe\n\n  #emitter = ee()\n\n  #preProcessors: Set<Processor> = new Set()\n\n  #uploaders: Set<Processor> = new Set()\n\n  #postProcessors: Set<Processor> = new Set()\n\n  defaultLocale: Locale\n\n  locale!: Locale\n\n  // The user optionally passes in options, but we set defaults for missing options.\n  // We consider all options present after the contructor has run.\n  opts: NonNullableUppyOptions<M, B>\n\n  store: NonNullableUppyOptions<M, B>['store']\n\n  // Warning: do not use this from a plugin, as it will cause the plugins' translations to be missing\n  i18n!: I18n\n\n  i18nArray!: Translator['translateArray']\n\n  scheduledAutoProceed: ReturnType<typeof setTimeout> | null = null\n\n  wasOffline = false\n\n  /**\n   * Instantiate Uppy\n   */\n  constructor(opts?: UppyOptionsWithOptionalRestrictions<M, B>) {\n    this.defaultLocale = locale as any as Locale\n\n    const defaultOptions: UppyOptions<Record<string, unknown>, B> = {\n      id: 'uppy',\n      autoProceed: false,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: defaultRestrictionOptions,\n      meta: {},\n      onBeforeFileAdded: (file, files) => !Object.hasOwn(files, file.id),\n      onBeforeUpload: (files) => files,\n      store: new DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000,\n    }\n\n    const merged = { ...defaultOptions, ...opts } as Omit<\n      NonNullableUppyOptions<M, B>,\n      'restrictions'\n    >\n    // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n    this.opts = {\n      ...merged,\n      restrictions: {\n        ...(defaultOptions.restrictions as Restrictions),\n        ...(opts && opts.restrictions),\n      },\n    }\n\n    // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n    if (opts && opts.logger && opts.debug) {\n      this.log(\n        'You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.',\n        'warning',\n      )\n    } else if (opts && opts.debug) {\n      this.opts.logger = debugLogger\n    }\n\n    this.log(`Using Core v${Uppy.VERSION}`)\n\n    this.i18nInit()\n\n    this.store = this.opts.store\n    this.setState({\n      ...defaultUploadState,\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false,\n      },\n      meta: { ...this.opts.meta },\n      info: [],\n    })\n\n    this.#restricter = new Restricter<M, B>(\n      () => this.opts,\n      () => this.i18n,\n    )\n\n    this.#storeUnsubscribe = this.store.subscribe(\n      (prevState, nextState, patch) => {\n        this.emit('state-update', prevState, nextState, patch)\n        this.updateAll(nextState)\n      },\n    )\n\n    // Exposing uppy object on window for debugging and testing\n    if (this.opts.debug && typeof window !== 'undefined') {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore Mutating the global object for debug purposes\n      window[this.opts.id] = this\n    }\n\n    this.#addListeners()\n  }\n\n  emit<T extends keyof UppyEventMap<M, B>>(\n    event: T,\n    ...args: Parameters<UppyEventMap<M, B>[T]>\n  ): void {\n    this.#emitter.emit(event, ...args)\n  }\n\n  on<K extends keyof UppyEventMap<M, B>>(\n    event: K,\n    callback: UppyEventMap<M, B>[K],\n  ): this {\n    this.#emitter.on(event, callback)\n    return this\n  }\n\n  once<K extends keyof UppyEventMap<M, B>>(\n    event: K,\n    callback: UppyEventMap<M, B>[K],\n  ): this {\n    this.#emitter.once(event, callback)\n    return this\n  }\n\n  off<K extends keyof UppyEventMap<M, B>>(\n    event: K,\n    callback: UppyEventMap<M, B>[K],\n  ): this {\n    this.#emitter.off(event, callback)\n    return this\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n  updateAll(state: Partial<State<M, B>>): void {\n    this.iteratePlugins((plugin: UnknownPlugin<M, B>) => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state with a patch\n   */\n  setState(patch?: Partial<State<M, B>>): void {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state.\n   */\n  getState(): State<M, B> {\n    return this.store.getState()\n  }\n\n  patchFilesState(filesWithNewState: {\n    [id: string]: Partial<UppyFile<M, B>>\n  }): void {\n    const existingFilesState = this.getState().files\n\n    this.setState({\n      files: {\n        ...existingFilesState,\n        ...Object.fromEntries(\n          Object.entries(filesWithNewState).map(([fileID, newFileState]) => [\n            fileID,\n            {\n              ...existingFilesState[fileID],\n              ...newFileState,\n            },\n          ]),\n        ),\n      },\n    })\n  }\n\n  /**\n   * Shorthand to set state for a specific file.\n   */\n  setFileState(fileID: string, state: Partial<UppyFile<M, B>>): void {\n    if (!this.getState().files[fileID]) {\n      throw new Error(\n        `Can’t set state for ${fileID} (the file could have been removed)`,\n      )\n    }\n\n    this.patchFilesState({ [fileID]: state })\n  }\n\n  i18nInit(): void {\n    const onMissingKey = (key: string): void =>\n      this.log(`Missing i18n string: ${key}`, 'error')\n    const translator = new Translator([this.defaultLocale, this.opts.locale], {\n      onMissingKey,\n    })\n    this.i18n = translator.translate.bind(translator)\n    this.i18nArray = translator.translateArray.bind(translator)\n    this.locale = translator.locale\n  }\n\n  setOptions(newOpts: MinimalRequiredOptions<M, B>): void {\n    this.opts = {\n      ...this.opts,\n      ...(newOpts as UppyOptions<M, B>),\n      restrictions: {\n        ...this.opts.restrictions,\n        ...(newOpts?.restrictions as Restrictions),\n      },\n    }\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta)\n    }\n\n    this.i18nInit()\n\n    if (newOpts.locale) {\n      this.iteratePlugins((plugin) => {\n        plugin.setOptions(newOpts)\n      })\n    }\n\n    // Note: this is not the preact `setState`, it's an internal function that has the same name.\n    this.setState(undefined) // so that UI re-renders with new options\n  }\n\n  resetProgress(): void {\n    const defaultProgress: Omit<FileProgressNotStarted, 'bytesTotal'> = {\n      percentage: 0,\n      bytesUploaded: false,\n      uploadComplete: false,\n      uploadStarted: null,\n    }\n    const files = { ...this.getState().files }\n    const updatedFiles: State<M, B>['files'] = Object.create(null)\n\n    Object.keys(files).forEach((fileID) => {\n      updatedFiles[fileID] = {\n        ...files[fileID],\n        progress: {\n          ...files[fileID].progress,\n          ...defaultProgress,\n        },\n        // @ts-expect-error these typed are inserted\n        // into the namespace in their respective packages\n        // but core isn't ware of those\n        tus: undefined,\n        transloadit: undefined,\n      }\n    })\n\n    this.setState({ files: updatedFiles, ...defaultUploadState })\n  }\n\n  clear(): void {\n    const { capabilities, currentUploads } = this.getState()\n    if (\n      Object.keys(currentUploads).length > 0 &&\n      !capabilities.individualCancellation\n    ) {\n      throw new Error(\n        'The installed uploader plugin does not allow removing files during an upload.',\n      )\n    }\n\n    this.setState({ ...defaultUploadState, files: {} })\n  }\n\n  addPreProcessor(fn: Processor): void {\n    this.#preProcessors.add(fn)\n  }\n\n  removePreProcessor(fn: Processor): boolean {\n    return this.#preProcessors.delete(fn)\n  }\n\n  addPostProcessor(fn: Processor): void {\n    this.#postProcessors.add(fn)\n  }\n\n  removePostProcessor(fn: Processor): boolean {\n    return this.#postProcessors.delete(fn)\n  }\n\n  addUploader(fn: Processor): void {\n    this.#uploaders.add(fn)\n  }\n\n  removeUploader(fn: Processor): boolean {\n    return this.#uploaders.delete(fn)\n  }\n\n  setMeta(data: Partial<M>): void {\n    const updatedMeta = { ...this.getState().meta, ...data }\n    const updatedFiles = { ...this.getState().files }\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = {\n        ...updatedFiles[fileID],\n        meta: { ...updatedFiles[fileID].meta, ...data },\n      }\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles,\n    })\n  }\n\n  setFileMeta(fileID: string, data: State<M, B>['meta']): void {\n    const updatedFiles = { ...this.getState().files }\n    if (!updatedFiles[fileID]) {\n      this.log(\n        `Was trying to set metadata for a file that has been removed: ${fileID}`,\n      )\n      return\n    }\n    const newMeta = { ...updatedFiles[fileID].meta, ...data }\n    updatedFiles[fileID] = { ...updatedFiles[fileID], meta: newMeta }\n    this.setState({ files: updatedFiles })\n  }\n\n  /**\n   * Get a file object.\n   */\n  getFile(fileID: string): UppyFile<M, B> {\n    return this.getState().files[fileID]\n  }\n\n  /**\n   * Get all files in an array.\n   */\n  getFiles(): UppyFile<M, B>[] {\n    const { files } = this.getState()\n    return Object.values(files)\n  }\n\n  getFilesByIds(ids: string[]): UppyFile<M, B>[] {\n    return ids.map((id) => this.getFile(id))\n  }\n\n  getObjectOfFilesPerState(): {\n    newFiles: UppyFile<M, B>[]\n    startedFiles: UppyFile<M, B>[]\n    uploadStartedFiles: UppyFile<M, B>[]\n    pausedFiles: UppyFile<M, B>[]\n    completeFiles: UppyFile<M, B>[]\n    erroredFiles: UppyFile<M, B>[]\n    inProgressFiles: UppyFile<M, B>[]\n    inProgressNotPausedFiles: UppyFile<M, B>[]\n    processingFiles: UppyFile<M, B>[]\n    isUploadStarted: boolean\n    isAllComplete: boolean\n    isAllErrored: boolean\n    isAllPaused: boolean\n    isUploadInProgress: boolean\n    isSomeGhost: boolean\n  } {\n    const { files: filesObject, totalProgress, error } = this.getState()\n    const files = Object.values(filesObject)\n\n    const inProgressFiles: UppyFile<M, B>[] = []\n    const newFiles: UppyFile<M, B>[] = []\n    const startedFiles: UppyFile<M, B>[] = []\n    const uploadStartedFiles: UppyFile<M, B>[] = []\n    const pausedFiles: UppyFile<M, B>[] = []\n    const completeFiles: UppyFile<M, B>[] = []\n    const erroredFiles: UppyFile<M, B>[] = []\n    const inProgressNotPausedFiles: UppyFile<M, B>[] = []\n    const processingFiles: UppyFile<M, B>[] = []\n\n    for (const file of files) {\n      const { progress } = file\n\n      if (!progress.uploadComplete && progress.uploadStarted) {\n        inProgressFiles.push(file)\n        if (!file.isPaused) {\n          inProgressNotPausedFiles.push(file)\n        }\n      }\n      if (!progress.uploadStarted) {\n        newFiles.push(file)\n      }\n      if (\n        progress.uploadStarted ||\n        progress.preprocess ||\n        progress.postprocess\n      ) {\n        startedFiles.push(file)\n      }\n      if (progress.uploadStarted) {\n        uploadStartedFiles.push(file)\n      }\n      if (file.isPaused) {\n        pausedFiles.push(file)\n      }\n      if (progress.uploadComplete) {\n        completeFiles.push(file)\n      }\n      if (file.error) {\n        erroredFiles.push(file)\n      }\n      if (progress.preprocess || progress.postprocess) {\n        processingFiles.push(file)\n      }\n    }\n\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete:\n        totalProgress === 100 &&\n        completeFiles.length === files.length &&\n        processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused:\n        inProgressFiles.length !== 0 &&\n        pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some((file) => file.isGhost),\n    }\n  }\n\n  #informAndEmit(\n    errors: {\n      name: string\n      message: string\n      isUserFacing?: boolean\n      details?: string\n      isRestriction?: boolean\n      file?: UppyFile<M, B>\n    }[],\n  ): void {\n    for (const error of errors) {\n      if (error.isRestriction) {\n        this.emit(\n          'restriction-failed',\n          error.file,\n          error as RestrictionError<M, B>,\n        )\n      } else {\n        this.emit('error', error, error.file)\n      }\n      this.log(error, 'warning')\n    }\n\n    const userFacingErrors = errors.filter((error) => error.isUserFacing)\n\n    // don't flood the user: only show the first 4 toasts\n    const maxNumToShow = 4\n    const firstErrors = userFacingErrors.slice(0, maxNumToShow)\n    const additionalErrors = userFacingErrors.slice(maxNumToShow)\n    firstErrors.forEach(({ message, details = '' }) => {\n      this.info({ message, details }, 'error', this.opts.infoTimeout)\n    })\n\n    if (additionalErrors.length > 0) {\n      this.info({\n        message: this.i18n('additionalRestrictionsFailed', {\n          count: additionalErrors.length,\n        }),\n      })\n    }\n  }\n\n  validateRestrictions(\n    file: ValidateableFile<M, B>,\n    files: ValidateableFile<M, B>[] = this.getFiles(),\n  ): RestrictionError<M, B> | null {\n    try {\n      this.#restricter.validate(files, [file])\n    } catch (err) {\n      return err as any\n    }\n    return null\n  }\n\n  validateSingleFile(file: ValidateableFile<M, B>): string | null {\n    try {\n      this.#restricter.validateSingleFile(file)\n    } catch (err) {\n      return err.message\n    }\n    return null\n  }\n\n  validateAggregateRestrictions(\n    files: ValidateableFile<M, B>[],\n  ): string | null {\n    const existingFiles = this.getFiles()\n    try {\n      this.#restricter.validateAggregateRestrictions(existingFiles, files)\n    } catch (err) {\n      return err.message\n    }\n    return null\n  }\n\n  #checkRequiredMetaFieldsOnFile(file: UppyFile<M, B>): boolean {\n    const { missingFields, error } =\n      this.#restricter.getMissingRequiredMetaFields(file)\n\n    if (missingFields.length > 0) {\n      this.setFileState(file.id, { missingRequiredMetaFields: missingFields })\n      this.log(error.message)\n      this.emit('restriction-failed', file, error)\n      return false\n    }\n    return true\n  }\n\n  #checkRequiredMetaFields(files: State<M, B>['files']): boolean {\n    let success = true\n    for (const file of Object.values(files)) {\n      if (!this.#checkRequiredMetaFieldsOnFile(file)) {\n        success = false\n      }\n    }\n    return success\n  }\n\n  #assertNewUploadAllowed(file?: UppyFile<M, B>): void {\n    const { allowNewUpload } = this.getState()\n\n    if (allowNewUpload === false) {\n      const error = new RestrictionError<M, B>(\n        this.i18n('noMoreFilesAllowed'),\n        {\n          file,\n        },\n      )\n      this.#informAndEmit([error])\n      throw error\n    }\n  }\n\n  checkIfFileAlreadyExists(fileID: string): boolean {\n    const { files } = this.getState()\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   */\n  #transformFile(fileDescriptorOrFile: File | UppyFile<M, B>): UppyFile<M, B> {\n    // Uppy expects files in { name, type, size, data } format.\n    // If the actual File object is passed from input[type=file] or drag-drop,\n    // we normalize it to match Uppy file object\n    const file = (\n      fileDescriptorOrFile instanceof File ?\n        {\n          name: fileDescriptorOrFile.name,\n          type: fileDescriptorOrFile.type,\n          size: fileDescriptorOrFile.size,\n          data: fileDescriptorOrFile,\n        }\n      : fileDescriptorOrFile) as UppyFile<M, B>\n\n    const fileType = getFileType(file)\n    const fileName = getFileName(fileType, file)\n    const fileExtension = getFileNameAndExtension(fileName).extension\n    const id = getSafeFileId(file, this.getID())\n\n    const meta = file.meta || {}\n    meta.name = fileName\n    meta.type = fileType\n\n    // `null` means the size is unknown.\n    const size =\n      Number.isFinite(file.data.size) ? file.data.size : (null as never)\n\n    return {\n      source: file.source || '',\n      id,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: {\n        ...this.getState().meta,\n        ...meta,\n      },\n      type: fileType,\n      data: file.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: false,\n        bytesTotal: size,\n        uploadComplete: false,\n        uploadStarted: null,\n      },\n      size,\n      isGhost: false,\n      isRemote: file.isRemote || false,\n      remote: file.remote,\n      preview: file.preview,\n    }\n  }\n\n  // Schedule an upload if `autoProceed` is enabled.\n  #startIfAutoProceed(): void {\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(() => {\n        this.scheduledAutoProceed = null\n        this.upload().catch((err) => {\n          if (!err.isRestriction) {\n            this.log(err.stack || err.message || err)\n          }\n        })\n      }, 4)\n    }\n  }\n\n  #checkAndUpdateFileState(filesToAdd: UppyFile<M, B>[]): {\n    nextFilesState: State<M, B>['files']\n    validFilesToAdd: UppyFile<M, B>[]\n    errors: RestrictionError<M, B>[]\n  } {\n    const { files: existingFiles } = this.getState()\n\n    // create a copy of the files object only once\n    const nextFilesState = { ...existingFiles }\n    const validFilesToAdd: UppyFile<M, B>[] = []\n    const errors: RestrictionError<M, B>[] = []\n\n    for (const fileToAdd of filesToAdd) {\n      try {\n        let newFile = this.#transformFile(fileToAdd)\n\n        // If a file has been recovered (Golden Retriever), but we were unable to recover its data (probably too large),\n        // users are asked to re-select these half-recovered files and then this method will be called again.\n        // In order to keep the progress, meta and everything else, we keep the existing file,\n        // but we replace `data`, and we remove `isGhost`, because the file is no longer a ghost now\n        const isGhost = existingFiles[newFile.id]?.isGhost\n        if (isGhost) {\n          const existingFileState = existingFiles[newFile.id]\n          newFile = {\n            ...existingFileState,\n            isGhost: false,\n            data: fileToAdd.data,\n          }\n          this.log(\n            `Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`,\n          )\n        }\n\n        const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(\n          newFile,\n          nextFilesState,\n        )\n\n        if (\n          !onBeforeFileAddedResult &&\n          this.checkIfFileAlreadyExists(newFile.id)\n        ) {\n          throw new RestrictionError(\n            this.i18n('noDuplicates', {\n              fileName: newFile.name ?? this.i18n('unnamed'),\n            }),\n            { file: fileToAdd },\n          )\n        }\n\n        // Pass through reselected files from Golden Retriever\n        if (onBeforeFileAddedResult === false && !isGhost) {\n          // Don’t show UI info for this error, as it should be done by the developer\n          throw new RestrictionError(\n            'Cannot add the file because onBeforeFileAdded returned false.',\n            { isUserFacing: false, file: fileToAdd },\n          )\n        } else if (\n          typeof onBeforeFileAddedResult === 'object' &&\n          onBeforeFileAddedResult !== null\n        ) {\n          newFile = onBeforeFileAddedResult\n        }\n\n        this.#restricter.validateSingleFile(newFile)\n\n        // need to add it to the new local state immediately, so we can use the state to validate the next files too\n        nextFilesState[newFile.id] = newFile\n        validFilesToAdd.push(newFile)\n      } catch (err) {\n        errors.push(err as any)\n      }\n    }\n\n    try {\n      // need to run this separately because it's much more slow, so if we run it inside the for-loop it will be very slow\n      // when many files are added\n      this.#restricter.validateAggregateRestrictions(\n        Object.values(existingFiles),\n        validFilesToAdd,\n      )\n    } catch (err) {\n      errors.push(err as any)\n\n      // If we have any aggregate error, don't allow adding this batch\n      return {\n        nextFilesState: existingFiles,\n        validFilesToAdd: [],\n        errors,\n      }\n    }\n\n    return {\n      nextFilesState,\n      validFilesToAdd,\n      errors,\n    }\n  }\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   */\n  addFile(file: File | MinimalRequiredUppyFile<M, B>): UppyFile<M, B>['id'] {\n    this.#assertNewUploadAllowed(file as UppyFile<M, B>)\n\n    const { nextFilesState, validFilesToAdd, errors } =\n      this.#checkAndUpdateFileState([file as UppyFile<M, B>])\n\n    const restrictionErrors = errors.filter((error) => error.isRestriction)\n    this.#informAndEmit(restrictionErrors)\n\n    if (errors.length > 0) throw errors[0]\n\n    this.setState({ files: nextFilesState })\n\n    const [firstValidFileToAdd] = validFilesToAdd\n\n    this.emit('file-added', firstValidFileToAdd)\n    this.emit('files-added', validFilesToAdd)\n    this.log(\n      `Added file: ${firstValidFileToAdd.name}, ${firstValidFileToAdd.id}, mime type: ${firstValidFileToAdd.type}`,\n    )\n\n    this.#startIfAutoProceed()\n\n    return firstValidFileToAdd.id\n  }\n\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n  addFiles(fileDescriptors: MinimalRequiredUppyFile<M, B>[]): void {\n    this.#assertNewUploadAllowed()\n\n    const { nextFilesState, validFilesToAdd, errors } =\n      this.#checkAndUpdateFileState(fileDescriptors as UppyFile<M, B>[])\n\n    const restrictionErrors = errors.filter((error) => error.isRestriction)\n    this.#informAndEmit(restrictionErrors)\n\n    const nonRestrictionErrors = errors.filter((error) => !error.isRestriction)\n\n    if (nonRestrictionErrors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n'\n      nonRestrictionErrors.forEach((subError) => {\n        message += `\\n * ${subError.message}`\n      })\n\n      this.info(\n        {\n          message: this.i18n('addBulkFilesFailed', {\n            smart_count: nonRestrictionErrors.length,\n          }),\n          details: message,\n        },\n        'error',\n        this.opts.infoTimeout,\n      )\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(nonRestrictionErrors, message)\n      } else {\n        const err = new Error(message)\n        // @ts-expect-error fallback when AggregateError is not available\n        err.errors = nonRestrictionErrors\n        throw err\n      }\n    }\n\n    // OK, we haven't thrown an error, we can start updating state and emitting events now:\n\n    this.setState({ files: nextFilesState })\n\n    validFilesToAdd.forEach((file) => {\n      this.emit('file-added', file)\n    })\n\n    this.emit('files-added', validFilesToAdd)\n\n    if (validFilesToAdd.length > 5) {\n      this.log(`Added batch of ${validFilesToAdd.length} files`)\n    } else {\n      Object.values(validFilesToAdd).forEach((file) => {\n        this.log(\n          `Added file: ${file.name}\\n id: ${file.id}\\n type: ${file.type}`,\n        )\n      })\n    }\n\n    if (validFilesToAdd.length > 0) {\n      this.#startIfAutoProceed()\n    }\n  }\n\n  removeFiles(fileIDs: string[]): void {\n    const { files, currentUploads } = this.getState()\n    const updatedFiles = { ...files }\n    const updatedUploads = { ...currentUploads }\n\n    const removedFiles = Object.create(null)\n    fileIDs.forEach((fileID) => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID]\n        delete updatedFiles[fileID]\n      }\n    })\n\n    // Remove files from the `fileIDs` list in each upload.\n    function fileIsNotRemoved(uploadFileID: string): boolean {\n      return removedFiles[uploadFileID] === undefined\n    }\n\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs =\n        currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved)\n\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID]\n        return\n      }\n\n      const { capabilities } = this.getState()\n      if (\n        newFileIDs.length !== currentUploads[uploadID].fileIDs.length &&\n        !capabilities.individualCancellation\n      ) {\n        throw new Error(\n          'The installed uploader plugin does not allow removing files during an upload.',\n        )\n      }\n\n      updatedUploads[uploadID] = {\n        ...currentUploads[uploadID],\n        fileIDs: newFileIDs,\n      }\n    })\n\n    const stateUpdate: Partial<State<M, B>> = {\n      currentUploads: updatedUploads,\n      files: updatedFiles,\n    }\n\n    // If all files were removed - allow new uploads,\n    // and clear recoveredState\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true\n      stateUpdate.error = null\n      stateUpdate.recoveredState = null\n    }\n\n    this.setState(stateUpdate)\n    this.#updateTotalProgressThrottled()\n\n    const removedFileIDs = Object.keys(removedFiles)\n    removedFileIDs.forEach((fileID) => {\n      this.emit('file-removed', removedFiles[fileID])\n    })\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`)\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`)\n    }\n  }\n\n  removeFile(fileID: string): void {\n    this.removeFiles([fileID])\n  }\n\n  pauseResume(fileID: string): boolean | undefined {\n    if (\n      !this.getState().capabilities.resumableUploads ||\n      this.getFile(fileID).progress.uploadComplete\n    ) {\n      return undefined\n    }\n\n    const file = this.getFile(fileID)\n    const wasPaused = file.isPaused || false\n    const isPaused = !wasPaused\n\n    this.setFileState(fileID, {\n      isPaused,\n    })\n\n    this.emit('upload-pause', file, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll(): void {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return (\n        !updatedFiles[file].progress.uploadComplete &&\n        updatedFiles[file].progress.uploadStarted\n      )\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = { ...updatedFiles[file], isPaused: true }\n      updatedFiles[file] = updatedFile\n    })\n\n    this.setState({ files: updatedFiles })\n    this.emit('pause-all')\n  }\n\n  resumeAll(): void {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return (\n        !updatedFiles[file].progress.uploadComplete &&\n        updatedFiles[file].progress.uploadStarted\n      )\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({ files: updatedFiles })\n\n    this.emit('resume-all')\n  }\n\n  retryAll(): Promise<UploadResult<M, B> | undefined> {\n    const updatedFiles = { ...this.getState().files }\n    const filesToRetry = Object.keys(updatedFiles).filter((file) => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null,\n    })\n\n    this.emit('retry-all', Object.values(updatedFiles))\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: [],\n      })\n    }\n\n    const uploadID = this.#createUpload(filesToRetry, {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  cancelAll(): void {\n    this.emit('cancel-all')\n\n    const { files } = this.getState()\n\n    const fileIDs = Object.keys(files)\n    if (fileIDs.length) {\n      this.removeFiles(fileIDs)\n    }\n\n    this.setState(defaultUploadState)\n  }\n\n  retryUpload(fileID: string): Promise<UploadResult<M, B> | undefined> {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false,\n    })\n\n    this.emit('upload-retry', this.getFile(fileID))\n\n    const uploadID = this.#createUpload([fileID], {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  logout(): void {\n    this.iteratePlugins((plugin) => {\n      ;(plugin as UnknownProviderPlugin<M, B>).provider?.logout?.()\n    })\n  }\n\n  #handleUploadProgress = (\n    file: UppyFile<M, B> | undefined,\n    progress: FileProgressStarted,\n  ) => {\n    const fileInState = file ? this.getFile(file.id) : undefined\n    if (file == null || !fileInState) {\n      this.log(\n        `Not setting progress for a file that has been removed: ${file?.id}`,\n      )\n      return\n    }\n\n    if (fileInState.progress.percentage === 100) {\n      this.log(\n        `Not setting progress for a file that has been already uploaded: ${file.id}`,\n      )\n      return\n    }\n\n    const newProgress = {\n      bytesTotal: progress.bytesTotal,\n      // bytesTotal may be null or zero; in that case we can't divide by it\n      percentage:\n        (\n          progress.bytesTotal != null &&\n          Number.isFinite(progress.bytesTotal) &&\n          progress.bytesTotal > 0\n        ) ?\n          Math.round((progress.bytesUploaded / progress.bytesTotal) * 100)\n        : undefined,\n    }\n\n    if (fileInState.progress.uploadStarted != null) {\n      this.setFileState(file.id, {\n        progress: {\n          ...fileInState.progress,\n          ...newProgress,\n          bytesUploaded: progress.bytesUploaded,\n        },\n      })\n    } else {\n      this.setFileState(file.id, {\n        progress: {\n          ...fileInState.progress,\n          ...newProgress,\n        },\n      })\n    }\n\n    this.#updateTotalProgressThrottled()\n  }\n\n  #updateTotalProgress() {\n    const totalProgress = this.#calculateTotalProgress()\n    let totalProgressPercent: number | null = null\n    if (totalProgress != null) {\n      totalProgressPercent = Math.round(totalProgress * 100)\n      if (totalProgressPercent > 100) totalProgressPercent = 100\n      else if (totalProgressPercent < 0) totalProgressPercent = 0\n    }\n\n    this.emit('progress', totalProgressPercent ?? 0)\n    this.setState({\n      totalProgress: totalProgressPercent ?? 0,\n    })\n  }\n\n  // ___Why throttle at 500ms?\n  //    - We must throttle at >250ms for superfocus in Dashboard to work well\n  //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n  //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n  //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n  //    - We must throttle at around >500ms to avoid performance lags.\n  //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n  #updateTotalProgressThrottled = throttle(\n    () => this.#updateTotalProgress(),\n    500,\n    { leading: true, trailing: true },\n  )\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/explicit-module-boundary-types\n  private [Symbol.for('uppy test: updateTotalProgress')]() {\n    return this.#updateTotalProgress()\n  }\n\n  #calculateTotalProgress() {\n    // calculate total progress, using the number of files currently uploading,\n    // between 0 and 1 and sum of individual progress of each file\n    const files = this.getFiles()\n\n    // note: also includes files that have completed uploading:\n    const filesInProgress = files.filter((file) => {\n      return (\n        file.progress.uploadStarted ||\n        file.progress.preprocess ||\n        file.progress.postprocess\n      )\n    })\n\n    if (filesInProgress.length === 0) {\n      return 0\n    }\n\n    if (filesInProgress.every((file) => file.progress.uploadComplete)) {\n      // If every uploading file is complete, and we're still getting progress, it probably means\n      // there's a bug somewhere in some progress reporting code (maybe not even our code)\n      // and we're still getting progress, so let's just assume it means a 100% progress\n      return 1\n    }\n\n    const isSizedFile = (file: UppyFile<M, B>) =>\n      file.progress.bytesTotal != null && file.progress.bytesTotal !== 0\n\n    const sizedFilesInProgress = filesInProgress.filter(isSizedFile)\n    const unsizedFilesInProgress = filesInProgress.filter(\n      (file) => !isSizedFile(file),\n    )\n\n    if (\n      sizedFilesInProgress.every((file) => file.progress.uploadComplete) &&\n      unsizedFilesInProgress.length > 0 &&\n      !unsizedFilesInProgress.every((file) => file.progress.uploadComplete)\n    ) {\n      // we are done with uploading all files of known size, however\n      // there is at least one file with unknown size still uploading,\n      // and we cannot say anything about their progress\n      // In any case, return null because it doesn't make any sense to show a progress\n      return null\n    }\n\n    const totalFilesSize = sizedFilesInProgress.reduce(\n      (acc, file) => acc + (file.progress.bytesTotal ?? 0),\n      0,\n    )\n\n    const totalUploadedSize = sizedFilesInProgress.reduce(\n      (acc, file) => acc + (file.progress.bytesUploaded || 0),\n      0,\n    )\n\n    return totalFilesSize === 0 ? 0 : totalUploadedSize / totalFilesSize\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n  #addListeners(): void {\n    // Type inference only works for inline functions so we have to type it again\n    const errorHandler: UppyEventMap<M, B>['error'] = (\n      error,\n      file,\n      response,\n    ) => {\n      let errorMsg = error.message || 'Unknown error'\n      if (error.details) {\n        errorMsg += ` ${error.details}`\n      }\n\n      this.setState({ error: errorMsg })\n\n      if (file != null && file.id in this.getState().files) {\n        this.setFileState(file.id, {\n          error: errorMsg,\n          response,\n        })\n      }\n    }\n\n    this.on('error', errorHandler)\n\n    this.on('upload-error', (file, error, response) => {\n      errorHandler(error, file, response)\n\n      if (typeof error === 'object' && error.message) {\n        this.log(error.message, 'error')\n        const newError = new Error(\n          this.i18n('failedToUpload', { file: file?.name ?? '' }),\n        ) as any // we may want a new custom error here\n        newError.isUserFacing = true // todo maybe don't do this with all errors?\n        newError.details = error.message\n        if (error.details) {\n          newError.details += ` ${error.details}`\n        }\n        this.#informAndEmit([newError])\n      } else {\n        this.#informAndEmit([error])\n      }\n    })\n\n    let uploadStalledWarningRecentlyEmitted: ReturnType<\n      typeof setTimeout\n    > | null = null\n    this.on('upload-stalled', (error, files) => {\n      const { message } = error\n      const details = files.map((file) => file.meta.name).join(', ')\n      if (!uploadStalledWarningRecentlyEmitted) {\n        this.info({ message, details }, 'warning', this.opts.infoTimeout)\n        uploadStalledWarningRecentlyEmitted = setTimeout(() => {\n          uploadStalledWarningRecentlyEmitted = null\n        }, this.opts.infoTimeout)\n      }\n      this.log(`${message} ${details}`.trim(), 'warning')\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    const onUploadStarted = (files: UppyFile<M, B>[]): void => {\n      const filesFiltered = files.filter((file) => {\n        const exists = file != null && this.getFile(file.id)\n        if (!exists)\n          this.log(\n            `Not setting progress for a file that has been removed: ${file?.id}`,\n          )\n        return exists\n      })\n\n      const filesState = Object.fromEntries(\n        filesFiltered.map((file) => [\n          file.id,\n          {\n            progress: {\n              uploadStarted: Date.now(),\n              uploadComplete: false,\n              bytesUploaded: 0,\n              bytesTotal: file.size,\n            } as FileProgressStarted,\n          },\n        ]),\n      )\n\n      this.patchFilesState(filesState)\n    }\n\n    this.on('upload-start', onUploadStarted)\n\n    this.on('upload-progress', this.#handleUploadProgress)\n\n    this.on('upload-success', (file, uploadResp) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n\n      const currentProgress = this.getFile(file.id).progress\n      this.setFileState(file.id, {\n        progress: {\n          ...currentProgress,\n          postprocess:\n            this.#postProcessors.size > 0 ?\n              {\n                mode: 'indeterminate',\n              }\n            : undefined,\n          uploadComplete: true,\n          percentage: 100,\n          bytesUploaded: currentProgress.bytesTotal,\n        } as FileProgressStarted,\n        response: uploadResp,\n        uploadURL: uploadResp.uploadURL,\n        isPaused: false,\n      })\n\n      // Remote providers sometimes don't tell us the file size,\n      // but we can know how many bytes we uploaded once the upload is complete.\n      if (file.size == null) {\n        this.setFileState(file.id, {\n          size: uploadResp.bytesUploaded || currentProgress.bytesTotal,\n        })\n      }\n\n      this.#updateTotalProgressThrottled()\n    })\n\n    this.on('preprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getFile(file.id).progress, preprocess: progress },\n      })\n    })\n\n    this.on('preprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n      const files = { ...this.getState().files }\n      files[file.id] = {\n        ...files[file.id],\n        progress: { ...files[file.id].progress },\n      }\n      delete files[file.id].progress.preprocess\n\n      this.setState({ files })\n    })\n\n    this.on('postprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n      this.setFileState(file.id, {\n        progress: {\n          ...this.getState().files[file.id].progress,\n          postprocess: progress,\n        },\n      })\n    })\n\n    this.on('postprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n      const files = {\n        ...this.getState().files,\n      }\n      files[file.id] = {\n        ...files[file.id],\n        progress: {\n          ...files[file.id].progress,\n        },\n      }\n      delete files[file.id].progress.postprocess\n\n      this.setState({ files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this.#updateTotalProgressThrottled()\n    })\n\n    // @ts-expect-error should fix itself when dashboard it typed (also this doesn't belong here)\n    this.on('dashboard:file-edit-complete', (file) => {\n      if (file) {\n        this.#checkRequiredMetaFieldsOnFile(file)\n      }\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('online', this.#updateOnlineStatus)\n      window.addEventListener('offline', this.#updateOnlineStatus)\n      setTimeout(this.#updateOnlineStatus, 3000)\n    }\n  }\n\n  updateOnlineStatus(): void {\n    const online = window.navigator.onLine ?? true\n    if (!online) {\n      this.emit('is-offline')\n      this.info(this.i18n('noInternetConnection'), 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info(this.i18n('connectedToInternet'), 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  #updateOnlineStatus = this.updateOnlineStatus.bind(this)\n\n  getID(): string {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core.\n   */\n  use<T extends typeof BasePlugin<any, M, B>>(\n    Plugin: T,\n    // We want to let the plugin decide whether `opts` is optional or not\n    // so we spread the argument rather than defining `opts:` ourselves.\n    ...args: OmitFirstArg<ConstructorParameters<T>>\n  ): this {\n    if (typeof Plugin !== 'function') {\n      const msg =\n        `Expected a plugin class, but got ${\n          Plugin === null ? 'null' : typeof Plugin\n        }.` +\n        ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, ...args)\n    const pluginId = plugin.id\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      const msg =\n        `Already found a plugin named '${existsPluginAlready.id}'. ` +\n        `Tried to use: '${pluginId}'.\\n` +\n        'Uppy plugins must have unique `id` options.'\n      throw new Error(msg)\n    }\n\n    // @ts-expect-error does exist\n    if (Plugin.VERSION) {\n      // @ts-expect-error does exist\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`)\n    }\n\n    if (plugin.type in this.#plugins) {\n      this.#plugins[plugin.type].push(plugin)\n    } else {\n      this.#plugins[plugin.type] = [plugin]\n    }\n    plugin.install()\n\n    this.emit('plugin-added', plugin)\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name.\n   */\n  getPlugin<T extends UnknownPlugin<M, B> = UnknownPlugin<M, B>>(\n    id: string,\n  ): T | undefined {\n    for (const plugins of Object.values(this.#plugins)) {\n      const foundPlugin = plugins.find((plugin) => plugin.id === id)\n      if (foundPlugin != null) return foundPlugin as T\n    }\n    return undefined\n  }\n\n  private [Symbol.for('uppy test: getPlugins')](\n    type: string,\n  ): UnknownPlugin<M, B>[] {\n    return this.#plugins[type]\n  }\n\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   */\n  iteratePlugins(method: (plugin: UnknownPlugin<M, B>) => void): void {\n    Object.values(this.#plugins).flat(1).forEach(method)\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n  removePlugin(instance: UnknownPlugin<M, B>): void {\n    this.log(`Removing plugin ${instance.id}`)\n    this.emit('plugin-remove', instance)\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const list = this.#plugins[instance.type]\n    // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n    const index = list.findIndex((item) => item.id === instance.id)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n\n    const state = this.getState()\n    const updatedState = {\n      plugins: {\n        ...state.plugins,\n        [instance.id]: undefined,\n      },\n    }\n    this.setState(updatedState)\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  destroy(): void {\n    this.log(\n      `Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`,\n    )\n\n    this.cancelAll()\n\n    this.#storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      this.removePlugin(plugin)\n    })\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', this.#updateOnlineStatus)\n      window.removeEventListener('offline', this.#updateOnlineStatus)\n    }\n  }\n\n  hideInfo(): void {\n    const { info } = this.getState()\n\n    this.setState({ info: info.slice(1) })\n\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   */\n  info(\n    message:\n      | string\n      | { message: string; details?: string | Record<string, string> },\n    type: LogLevel = 'info',\n    duration = 3000,\n  ): void {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: [\n        ...this.getState().info,\n        {\n          type,\n          message: isComplexMessage ? message.message : message,\n          details: isComplexMessage ? message.details : null,\n        },\n      ],\n    })\n\n    setTimeout(() => this.hideInfo(), duration)\n\n    this.emit('info-visible')\n  }\n\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   */\n  log(message: unknown, type?: 'error' | 'warning'): void {\n    const { logger } = this.opts\n    switch (type) {\n      case 'error':\n        logger.error(message)\n        break\n      case 'warning':\n        logger.warn(message)\n        break\n      default:\n        logger.debug(message)\n        break\n    }\n  }\n\n  // We need to store request clients by a unique ID, so we can share RequestClient instances across files\n  // this allows us to do rate limiting and synchronous operations like refreshing provider tokens\n  // example: refreshing tokens: if each file has their own requestclient,\n  // we don't have any way to synchronize all requests in order to\n  // - block all requests\n  // - refresh the token\n  // - unblock all requests and allow them to run with a the new access token\n  // back when we had a requestclient per file, once an access token expired,\n  // all 6 files would go ahead and refresh the token at the same time\n  // (calling /refresh-token up to 6 times), which will probably fail for some providers\n  #requestClientById = new Map<string, unknown>()\n\n  registerRequestClient(id: string, client: unknown): void {\n    this.#requestClientById.set(id, client)\n  }\n\n  /** @protected */\n  getRequestClientForFile<Client>(file: UppyFile<M, B>): Client {\n    if (!file.remote)\n      throw new Error(\n        `Tried to get RequestClient for a non-remote file ${file.id}`,\n      )\n    const requestClient = this.#requestClientById.get(\n      file.remote.requestClientId,\n    )\n    if (requestClient == null)\n      throw new Error(\n        `requestClientId \"${file.remote.requestClientId}\" not registered for file \"${file.id}\"`,\n      )\n    return requestClient as Client\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore(uploadID: string): Promise<UploadResult<M, B> | undefined> {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this.#removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this.#runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   */\n  #createUpload(\n    fileIDs: string[],\n    opts: { forceAllowNewUpload?: boolean } = {},\n  ): string {\n    // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n    const { forceAllowNewUpload = false } = opts\n\n    const { allowNewUpload, currentUploads } = this.getState()\n    if (!allowNewUpload && !forceAllowNewUpload) {\n      throw new Error('Cannot create a new upload: already uploading.')\n    }\n\n    const uploadID = nanoid()\n\n    this.emit('upload', uploadID, this.getFilesByIds(fileIDs))\n\n    this.setState({\n      allowNewUpload:\n        this.opts.allowMultipleUploadBatches !== false &&\n        this.opts.allowMultipleUploads !== false,\n\n      currentUploads: {\n        ...currentUploads,\n        [uploadID]: {\n          fileIDs,\n          step: 0,\n          result: {},\n        },\n      },\n    })\n\n    return uploadID\n  }\n\n  private [Symbol.for('uppy test: createUpload')](...args: any[]): string {\n    // @ts-expect-error https://github.com/microsoft/TypeScript/issues/47595\n    return this.#createUpload(...args)\n  }\n\n  #getUpload(uploadID: string): CurrentUpload<M, B> {\n    const { currentUploads } = this.getState()\n\n    return currentUploads[uploadID]\n  }\n\n  /**\n   * Add data to an upload's result object.\n   */\n  addResultData(uploadID: string, data: CurrentUpload<M, B>['result']): void {\n    if (!this.#getUpload(uploadID)) {\n      this.log(\n        `Not setting result for an upload that has been removed: ${uploadID}`,\n      )\n      return\n    }\n    const { currentUploads } = this.getState()\n    const currentUpload = {\n      ...currentUploads[uploadID],\n      result: { ...currentUploads[uploadID].result, ...data },\n    }\n    this.setState({\n      currentUploads: { ...currentUploads, [uploadID]: currentUpload },\n    })\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   */\n  #removeUpload(uploadID: string): void {\n    const currentUploads = { ...this.getState().currentUploads }\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads,\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   */\n  async #runUpload(uploadID: string): Promise<UploadResult<M, B> | undefined> {\n    const getCurrentUpload = (): CurrentUpload<M, B> => {\n      const { currentUploads } = this.getState()\n      return currentUploads[uploadID]\n    }\n\n    let currentUpload = getCurrentUpload()\n\n    const steps = [\n      ...this.#preProcessors,\n      ...this.#uploaders,\n      ...this.#postProcessors,\n    ]\n    try {\n      for (let step = currentUpload.step || 0; step < steps.length; step++) {\n        if (!currentUpload) {\n          break\n        }\n        const fn = steps[step]\n\n        this.setState({\n          currentUploads: {\n            ...this.getState().currentUploads,\n            [uploadID]: {\n              ...currentUpload,\n              step,\n            },\n          },\n        })\n\n        const { fileIDs } = currentUpload\n\n        // TODO give this the `updatedUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        await fn(fileIDs, uploadID)\n\n        // Update currentUpload value in case it was modified asynchronously.\n        currentUpload = getCurrentUpload()\n      }\n    } catch (err) {\n      this.#removeUpload(uploadID)\n      throw err\n    }\n\n    // Set result data.\n    if (currentUpload) {\n      // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n      // stuck in the postprocessing UI while the upload is fully complete.\n      // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n      // all, and never mark the postprocessing as complete. This is fine on its own but we\n      // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n      // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n      // before the postprocessing plugins can emit events.\n      //\n      // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n      // postprocessing completion, we do it instead.\n      currentUpload.fileIDs.forEach((fileID) => {\n        const file = this.getFile(fileID)\n        if (file && file.progress.postprocess) {\n          this.emit('postprocess-complete', file)\n        }\n      })\n\n      const files = currentUpload.fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => !file.error)\n      const failed = files.filter((file) => file.error)\n      this.addResultData(uploadID, { successful, failed, uploadID })\n\n      // Update currentUpload value in case it was modified asynchronously.\n      currentUpload = getCurrentUpload()\n    }\n    // Emit completion events.\n    // This is in a separate function so that the `currentUploads` variable\n    // always refers to the latest state. In the handler right above it refers\n    // to an outdated object without the `.result` property.\n    let result\n    if (currentUpload) {\n      result = currentUpload.result\n      this.emit('complete', result)\n\n      this.#removeUpload(uploadID)\n    }\n    if (result == null) {\n      this.log(\n        `Not setting result for an upload that has been removed: ${uploadID}`,\n      )\n    }\n    return result\n  }\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   */\n  async upload(): Promise<NonNullable<UploadResult<M, B>> | undefined> {\n    if (!this.#plugins['uploader']?.length) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    let { files } = this.getState()\n\n    // Check if we have files with errors (for retry behavior)\n    const filesToRetry = Object.keys(files).filter(\n      (fileID) => files[fileID].error,\n    )\n    const hasFilesToRetry = filesToRetry.length > 0\n\n    // If we have files to retry, behave like retryAll() and ignore any new files\n    if (hasFilesToRetry) {\n      const updatedFiles = { ...files }\n      filesToRetry.forEach((fileID) => {\n        updatedFiles[fileID] = {\n          ...updatedFiles[fileID],\n          isPaused: false,\n          error: null,\n        }\n      })\n\n      this.setState({\n        files: updatedFiles,\n        error: null,\n      })\n\n      this.emit('retry-all', Object.values(updatedFiles))\n\n      const uploadID = this.#createUpload(filesToRetry, {\n        forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n      })\n      const result = await this.#runUpload(uploadID)\n      const hasNewFiles = this.getFiles().filter(\n        (file) => file.progress.uploadStarted == null,\n      )\n\n      if (!hasNewFiles) {\n        return result\n      }\n      files = this.getState().files\n    }\n\n    // If no files to retry, proceed with original upload() behavior for new files\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files)\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(\n        new Error(\n          'Not starting the upload because onBeforeUpload returned false',\n        ),\n      )\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult\n      // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n      this.setState({\n        files,\n      })\n    }\n\n    return Promise.resolve()\n      .then(() => this.#restricter.validateMinNumberOfFiles(files))\n      .catch((err) => {\n        this.#informAndEmit([err])\n        throw err\n      })\n      .then(() => {\n        if (!this.#checkRequiredMetaFields(files)) {\n          throw new RestrictionError(this.i18n('missingRequiredMetaField'))\n        }\n      })\n      .catch((err) => {\n        // Doing this in a separate catch because we already emited and logged\n        // all the errors in `checkRequiredMetaFields` so we only throw a generic\n        // missing fields error here.\n        throw err\n      })\n      .then(() => {\n        const { currentUploads } = this.getState()\n        // get a list of files that are currently assigned to uploads\n        const currentlyUploadingFiles = Object.values(currentUploads).flatMap(\n          (curr) => curr.fileIDs,\n        )\n\n        const waitingFileIDs: string[] = []\n        Object.keys(files).forEach((fileID) => {\n          const file = this.getFile(fileID)\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\n          if (\n            !file.progress.uploadStarted &&\n            currentlyUploadingFiles.indexOf(fileID) === -1\n          ) {\n            waitingFileIDs.push(file.id)\n          }\n        })\n\n        const uploadID = this.#createUpload(waitingFileIDs)\n        return this.#runUpload(uploadID)\n      })\n      .catch((err) => {\n        this.emit('error', err)\n        this.log(err, 'error')\n        throw err\n      })\n  }\n}\n\nexport default Uppy\n"],"mappings":"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","ignoreList":[]}