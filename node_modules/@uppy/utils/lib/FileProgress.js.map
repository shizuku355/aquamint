{"version":3,"names":[],"sources":["FileProgress.ts"],"sourcesContent":["export interface DeterminateFileProcessing {\n  mode: 'determinate'\n  message: string\n  value: number\n}\nexport interface IndeterminateFileProcessing {\n  mode: 'indeterminate'\n  message?: string\n  value?: 0\n}\nexport type FileProcessingInfo =\n  | IndeterminateFileProcessing\n  | DeterminateFileProcessing\n\n// TODO explore whether all of these properties need to be optional\ninterface FileProgressBase {\n  uploadComplete?: boolean\n  percentage?: number // undefined if we don't know the percentage (e.g. for files with `bytesTotal` null)\n  // note that Companion will send `bytesTotal` 0 if unknown size (not `null`).\n  // this is not perfect because some files can actually have a size of 0,\n  // and then we might think those files have an unknown size\n  // todo we should change this in companion\n  bytesTotal: number | null\n  preprocess?: FileProcessingInfo\n  postprocess?: FileProcessingInfo\n}\n\n// FileProgress is either started or not started. We want to make sure TS doesn't\n// let us mix the two cases, and for that effect, we have one type for each case:\nexport type FileProgressStarted = FileProgressBase & {\n  uploadStarted: number\n  bytesUploaded: number\n}\nexport type FileProgressNotStarted = FileProgressBase & {\n  uploadStarted: null\n  bytesUploaded: false\n}\nexport type FileProgress = FileProgressStarted | FileProgressNotStarted\n"],"mappings":"","ignoreList":[]}